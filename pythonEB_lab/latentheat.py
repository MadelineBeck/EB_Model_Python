# -*- coding: utf-8 -*-
"""LatentHeat.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L-jIz_UGuNk6ZGjgMlp1-W8CWkk8NZbb
"""

# Install the necessary packages
import pandas as pd
from numpy.ma.core import log
import numpy as np
import math

# Import the .csv for the MET Station
# Link to the raw data URL that is provided by the github repository
url = 'https://raw.githubusercontent.com/MadelineBeck/EB_Models/main/matlabEB_lab/CENMET_INPUT_data.csv'
inMet = pd.read_csv(url)

# Before moving forward, we need to have Sam's vapor pressure difference code so that the latent heat calculations can work.
# Call the vapPressure function here.


'''We need to start to create variables that are the constants for the rest of this workbook'''

# Latent heat of vaporization
L_v = 2.499e6 # J/kg
# Latent heat of sublimation
L_sub = 2.835e6 # J/kg
# Standard density of air
rho = 1.29 # kg/m^3
# Total atmospheric pressure assumed
Pa = 100000 # Pa
# Vapor pressure difference
# Note that this value will be calculated in a different script and will need to be called beforehand for this to work.
#vp_diff = ea - esat

# VonKarmon's constant
k = 0.4
# The height of the measured windspeed above the snowpack. 
z = 2
# Aerodynamic roughness in m
z0 = 0.003

# Calculate bulk transfer coefficient for vapor exchange
Ce = k**2 *log(z/z0)**-2

# This computes the latent heat of vaporization
def latentheat(df, rho, L_v, L_sub, Pa, Ce):
  '''
  The purpose of this function is to determine the latent heat of the snowpack based on meteorological variables. 

  Parameters:
  -----------
  df = Dataframe. This will be used to call the values of temperature, wind speed, and vpdiff to use for our latent heat calculations. 
  rho = constant defined above. The standard density of air.
  L_v = constant defined above. The latent heat of vaporization.
  L_sub = constant defined above. The latent heat of vaporization.
  Pa = constant defined above. The total assumed atmospheric pressure.
  Ce = calculated above. Bulk transfer coefficient for vapor exchange.

  Returns:
  ---------
  Qe: The latent heat at that timestep. Appends the dataframe to add a new column of this calculated value.
'''
  inMet = df # Rename dataframe so we can call the function with 'df' instead of having to rely on the same csv name each time.

  Qe = np.empty(len(inMet.index)) # Create an empty array for our outputs of latent heat
  for i in range(len(inMet.index)): # For each index row in the inMet dataframe
    windspeed = inMet.iloc[i][' windSpeed'] # Set the function to look for windspeed at the location within the df.
    # It is important to note that vpdiff needs to be calculated in a different function and appended to the dataframe for this column to even be called.
    vpdiff = inMet.iloc[i]['vpdiff'] # Set the function to look for vpdiff at the location within the df.
    if inMet.iloc[i]['T_C'] > 0: # Search for values where the temperature is greater than 0
      Qe[i] = (rho * 0.622 * (L_v/Pa))*Ce*windspeed*vpdiff # Use this equation when the previous conditions are met.
      # Add the new values for Qe to the empty array we previously created
      inMet['Qe'] = Qe.tolist()
    else: # For conditions where the temperature is less than 0. Use the latent heat of sublimation instead of vaporization.
      Qe[i] = (rho * 0.622 * (L_sub/Pa))*Ce*windspeed*vpdiff
      inMet['Qe'] = Qe.tolist() # Add the new values for Qe to the empty array we previously created
    return inMet